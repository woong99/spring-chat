worker_processes  2;

# nginx-lua 로깅 설정
error_log /var/log/nginx-lua.log debug;

events {
    worker_connections  10000;
    # worker_processes and worker_connections allows you to calculate maxclients value:
    # max_clients = worker_processes * worker_connections
}

http {
  resolver 127.0.0.11 valid=10s ipv6=off;

  lua_shared_dict ws_servers 1m;

  init_worker_by_lua_block {
      local http = require "resty.http"

      -- 헬스체크를 수행하는 함수
      local function health_check()
          local cjson = require "cjson"
          local httpc = http.new()

          local res, err = httpc:request_uri("http://eureka-server:8761/helper/info", {
              method = "GET"
          })

          if not res then
              ngx.log(ngx.ERR, "Failed to request: ", err)
              return
          end

          local data = cjson.decode(res.body)

          local ip_addresses = {}

          -- 서버 목록 동기화
          for _, instance in ipairs(data) do
              ngx.shared.ws_servers:set(instance.deployType .. "@@" .. instance.ip .. ":" .. instance.port, 1)
              ip_addresses[instance.deployType .. "@@" .. instance.ip .. ":" .. instance.port] = true

              local servers = ngx.shared.ws_servers:get_keys()
          end

          -- Health Check 후 존재하지 않는 서버 목록 동기화
          local servers = ngx.shared.ws_servers:get_keys()
          for _, key in ipairs(servers) do
            if not ip_addresses[key] then
              ngx.shared.ws_servers:delete(key)
            end
          end
      end

      -- 주기적인 작업을 설정
      local function schedule_health_check()
          ngx.timer.at(0, health_check)
          -- 5초마다 헬스체크를 주기적으로 실행
          ngx.timer.every(5, health_check)
      end

      -- 5초 간격으로 헬스체크를 수행
      ngx.timer.at(0, health_check)
      ngx.timer.every(5, health_check)
  }

  upstream spring-10k-chat-api {
	  server spring-10k-chat-api:8080;
  }

  upstream spring-10k-chat-sse {
    server spring-10k-chat-sse:8080;
  }

  client_max_body_size 10M;

  map $http_origin $cors_origin {
    default "";
    "http://localhost:3000" $http_origin;
    "http://dev.dulian.kr" $http_origin;
  }

  server {
    listen       80;
    server_name  localhost;

    # WebSocket 서버 등록
    location /ws-up {
      content_by_lua_block {
        ngx.log(ngx.INFO, "WS Up Server IP : ",  ngx.var.arg_ip)
        ngx.log(ngx.INFO, "WS Up Server Deploy Type : ",  ngx.var.arg_deploy)

        ngx.shared.ws_servers:set(ngx.var.arg_deploy .. "@@" .. ngx.var.arg_ip .. ":8080", 1)
      }
    }

    # WebSocket 서버 제거
    location /ws-down {
      content_by_lua_block {
        ngx.log(ngx.INFO, "WS Down Server IP : ",  ngx.var.arg_ip)
        ngx.log(ngx.INFO, "WS Down Server Deploy Type : ",  ngx.var.arg_deploy)

        ngx.shared.ws_servers:delete(ngx.var.arg_deploy .. "@@" .. ngx.var.arg_ip .. ":8080")
      }
    }

    # Blue/Green 배포 시 다운되는 컨테이너의 IP 제거
    location /remove-ip-when-deploy {
      content_by_lua_block {
        local deploy_type = ngx.var.arg_deploy

        local keys = ngx.shared.ws_servers:get_keys()
        for _, key in ipairs(keys) do
          if key:find("^" .. deploy_type) then
            ngx.log(ngx.INFO, "Remove IP : ", key)
            ngx.shared.ws_servers:delete(key)
          end
        end
      }
    }

    # 서버 목록 조회
    location /get-ip-list {
      content_by_lua_block {
        local cjson = require "cjson"
        local keys = ngx.shared.ws_servers:get_keys()
        local ip_list = {}

        for _, key in ipairs(keys) do
          table.insert(ip_list, key)
        end

        ngx.say(cjson.encode(ip_list))
      }
    }

    # API 서버
    location / {
      proxy_pass http://spring-10k-chat-api;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      if ($request_method = OPTIONS) {
        add_header 'Access-Control-Allow-Origin' $cors_origin;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, X-Requested-With';
        add_header 'Access-Control-Allow-Credentials' 'true';
        return 204;
      }
    }

    # WebSocket 서버
    set $target_ws '';
	  location /ws-stomp {
	    content_by_lua_block {
        local servers = ngx.shared.ws_servers:get_keys()

        if #servers > 0 then
          math.randomseed(os.time())
          local random_index = math.random(#servers)
          local selected_server = servers[random_index]

          ngx.var.target_ws = selected_server:match("@@(.+)")
        else
            ngx.log(ngx.ERR, "No available websocket servers.")
            return
        end

        ngx.exec("@ws-stomp-upstream")
      }
	  }

	  location @ws-stomp-upstream {
 	    proxy_pass http://$target_ws;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
      proxy_set_header Host $host;
    }

    # SSE 서버
	  location /api/v1/chat-room/notification/subscribe {
	    proxy_pass http://spring-10k-chat-sse;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      # SSE 설정
	    proxy_read_timeout 3600s;
	    proxy_buffering off;
    }
  }

  # DataDog 설정
  server {
    listen 81;
    server_name localhost;

    access_log off;
  #   allow 127.0.0.1;
    allow all;
    deny all;

    location /nginx_status {
      # Choose your status module

      # freely available with open source NGINX
      stub_status;

      # for open source NGINX < version 1.7.5
      # stub_status on;

      # available only with NGINX Plus
      # status;

      # ensures the version information can be retrieved
      server_tokens on;
    }
  }
}
